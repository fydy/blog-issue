(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{53:function(n,e){n.exports='<section>\x3c!---\n{\n    "title": "island-cli 使用说明",\n    "type": "default",\n    "poster": "static/img/2018-08/islnad-cli.png",\n    "topic": "island-cli",\n    "sticky": false\n}\n--\x3e\n<h2>Github</h2>\n<p><a href="https://github.com/zhw2590582/island-cli">https://github.com/zhw2590582/island-cli</a></p>\n<h2>简介</h2>\n<p>首先 <code>island-cli</code> 是一个生成静态博客的命令行工具，工具本身的命令很少，主旨用来把静态网页托管于<code>github pages</code>上。然后这个工具很大部分功能是根据我的使用习惯来制作的，所以并没有像 <code>hexo</code> 那么人性化和复杂化，最后由于这个工具比较小众化，所以不会往深度去开发，但会一直优化下去，欢迎大家提建议。</p>\n<p><code>github pages</code> 很适用于那些只有域名但没有(钱买)服务器，而且还免费附赠 <code>https</code> ，但主要问题就是它是国外服务器，而且没有数据库。像  <code>hexo</code> 就是只负责生成静态页面，然后托管于<code>github pages</code> 的，而我这个工具也类似这样，但我并没有使用过  <code>hexo</code> ，所以具体它是怎么实现的就不讨论了。</p>\n<p>另外 <code>github pages</code>  支持一个开发工具叫 <code>jekyll</code> ，虽然方便但每次 <code>push</code> 都需要一段时间去等待编译，所以并不是那么适合那些经常改动页面的人。</p>\n<p><code>island-cli</code> 工具本身依赖于 <code>nodejs</code> 和 <code>webpack</code>，且需要一定的前端知识，所以不会详细解说一些前端知识，遇到问题可以到 <code>github</code> 提交 <code>issues</code>。</p>\n<h2>使用</h2>\n<p>首先是全局安装，安装好后就可以使用 <code>island</code> 命令了</p>\n<pre><code>npm install -g island-cli\n</code></pre>\n<p>以下是全部命令</p>\n<pre><code>初始化一个博客\n    $ island -i\n    $ island init\n\n当前版本\n    $ island -v\n    $ island version\n\n新增一篇文章\n    $ island -a &lt;name&gt;\n    $ island add &lt;name&gt;\n\n删除一篇文章\n    $ island -x &lt;name&gt;\n    $ island del &lt;name&gt;\n\n重置所有文章内容\n    $ island -r\n    $ island reset\n\n更新一个主题\n    $ island -u &lt;name&gt;\n    $ island update &lt;name&gt;\n\n开发模式\n    $ island -d\n    $ island dev\n\n生产模式\n    $ island -b\n    $ island build\n</code></pre>\n<h2>流程</h2>\n<p>这里要说一说整个搭建的简单流程，怎么从一个只有域名到完整的 <code>github pages</code> 网站搭建。</p>\n<ul>\n<li>新建一个 <code>github repository</code></li>\n<li>建立 <code>GitHub Pages</code>，选择从 <code>master branch</code> 根目录创建</li>\n<li>绑定你的自定义域名，你就可以通过你的域名访问到你的 <code>github repository</code></li>\n<li>把 <code>github repository</code> 克隆到你的本地，并用命令行工具进入目录</li>\n<li>执行 <code>island init</code> 命令，稍等一会就可以看到创建的文件了</li>\n<li>再执行 <code>npm install &amp;&amp; npm start</code> ，等一会就可以看到你的本地网站了</li>\n<li>开发完成后，执行 <code>npm run build</code> 会生成全部的静态文件</li>\n<li>最后 <code>push</code> 到远程 <code>github repository</code>，再通过域名就可以访问到网站了</li>\n</ul>\n<h2>目录</h2>\n<pre><code>├── src  开发目录\n├── ├── data   数据目录\n├── ├── ├── config   配置目录\n├── ├── ├── database  伪数据库目录\n├── ├── ├── pages  页面数据目录\n├── ├── ├── posts  文章数据目录\n├── ├── theme   主题目录\n├── ├── ├── default  默认主题\n├── static   静态目录\n├── ├── img  图片目录\n</code></pre>\n<h2>原理</h2>\n<p>其实没太复杂的原理，博客系统主要问题是文章数据怎么读取和存储，我把每个文章 <code>markdown</code> 的数据转换成 <code>js</code> 文件，然后进行按需加载，而并非把每篇文章转换成 <code>html</code> 文件，这意味着文章部分舍弃了 <code>seo</code> ，所以开发和打包都这么快。然后我建立了一个 <code>json</code> 伪数据库，里面保存了所有文章的元数据并暴露到 <code>window.database</code>，所有页面都可以访问到文章的元数据并进行各种操作，相当方便。</p>\n<h2>问题</h2>\n<ul>\n<li>怎么开发主题</li>\n<li>怎么使用cdn</li>\n<li>怎么使用功能页面</li>\n<li>怎么写配置文件</li>\n<li>怎么让页面模块化和布局分离</li>\n<li>怎么加载图片</li>\n<li>...待续</li>\n</ul>\n</section>\n'}}]);